// Code generated by goyacc -o parser.go -p dsl parser.y. DO NOT EDIT.

//line parser.y:1

package main

import __yyfmt__ "fmt"

//line parser.y:4

import (
	"fmt"
)

//line parser.y:12
type dslSymType struct {
	yys   int
	value int
	id    string
}

const LVAL = 57346
const RVAL = 57347
const MATCH = 57348
const LP = 57349
const RP = 57350
const BOOL = 57351
const UNKNOW = 57352

var dslToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LVAL",
	"RVAL",
	"MATCH",
	"LP",
	"RP",
	"BOOL",
	"UNKNOW",
}
var dslStatenames = [...]string{}

const dslEofCode = 1
const dslErrCode = 2
const dslInitialStackSize = 16

//line parser.y:38

//line yacctab:1
var dslExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const dslPrivate = 57344

const dslLast = 10

var dslAct = [...]int{

	10, 9, 4, 7, 8, 6, 3, 2, 1, 5,
}
var dslPact = [...]int{

	-5, -1000, -5, -1000, 1, -1000, -3, -1, -7, -9,
	-1000,
}
var dslPgo = [...]int{

	0, 8, 7, 6,
}
var dslR1 = [...]int{

	0, 1, 2, 2, 3, 3,
}
var dslR2 = [...]int{

	0, 1, 1, 2, 6, 5,
}
var dslChk = [...]int{

	-1000, -1, -2, -3, 7, -3, 4, 6, 5, 8,
	9,
}
var dslDef = [...]int{

	0, -2, 1, 2, 0, 3, 0, 0, 0, 5,
	4,
}
var dslTok1 = [...]int{

	1,
}
var dslTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10,
}
var dslTok3 = [...]int{
	0,
}

var dslErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	dslDebug        = 0
	dslErrorVerbose = false
)

type dslLexer interface {
	Lex(lval *dslSymType) int
	Error(s string)
}

type dslParser interface {
	Parse(dslLexer) int
	Lookahead() int
}

type dslParserImpl struct {
	lval  dslSymType
	stack [dslInitialStackSize]dslSymType
	char  int
}

func (p *dslParserImpl) Lookahead() int {
	return p.char
}

func dslNewParser() dslParser {
	return &dslParserImpl{}
}

const dslFlag = -1000

func dslTokname(c int) string {
	if c >= 1 && c-1 < len(dslToknames) {
		if dslToknames[c-1] != "" {
			return dslToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func dslStatname(s int) string {
	if s >= 0 && s < len(dslStatenames) {
		if dslStatenames[s] != "" {
			return dslStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func dslErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !dslErrorVerbose {
		return "syntax error"
	}

	for _, e := range dslErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + dslTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := dslPact[state]
	for tok := TOKSTART; tok-1 < len(dslToknames); tok++ {
		if n := base + tok; n >= 0 && n < dslLast && dslChk[dslAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if dslDef[state] == -2 {
		i := 0
		for dslExca[i] != -1 || dslExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; dslExca[i] >= 0; i += 2 {
			tok := dslExca[i]
			if tok < TOKSTART || dslExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if dslExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += dslTokname(tok)
	}
	return res
}

func dsllex1(lex dslLexer, lval *dslSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = dslTok1[0]
		goto out
	}
	if char < len(dslTok1) {
		token = dslTok1[char]
		goto out
	}
	if char >= dslPrivate {
		if char < dslPrivate+len(dslTok2) {
			token = dslTok2[char-dslPrivate]
			goto out
		}
	}
	for i := 0; i < len(dslTok3); i += 2 {
		token = dslTok3[i+0]
		if token == char {
			token = dslTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = dslTok2[1] /* unknown char */
	}
	if dslDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", dslTokname(token), uint(char))
	}
	return char, token
}

func dslParse(dsllex dslLexer) int {
	return dslNewParser().Parse(dsllex)
}

func (dslrcvr *dslParserImpl) Parse(dsllex dslLexer) int {
	var dsln int
	var dslVAL dslSymType
	var dslDollar []dslSymType
	_ = dslDollar // silence set and not used
	dslS := dslrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	dslstate := 0
	dslrcvr.char = -1
	dsltoken := -1 // dslrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		dslstate = -1
		dslrcvr.char = -1
		dsltoken = -1
	}()
	dslp := -1
	goto dslstack

ret0:
	return 0

ret1:
	return 1

dslstack:
	/* put a state and value onto the stack */
	if dslDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", dslTokname(dsltoken), dslStatname(dslstate))
	}

	dslp++
	if dslp >= len(dslS) {
		nyys := make([]dslSymType, len(dslS)*2)
		copy(nyys, dslS)
		dslS = nyys
	}
	dslS[dslp] = dslVAL
	dslS[dslp].yys = dslstate

dslnewstate:
	dsln = dslPact[dslstate]
	if dsln <= dslFlag {
		goto dsldefault /* simple state */
	}
	if dslrcvr.char < 0 {
		dslrcvr.char, dsltoken = dsllex1(dsllex, &dslrcvr.lval)
	}
	dsln += dsltoken
	if dsln < 0 || dsln >= dslLast {
		goto dsldefault
	}
	dsln = dslAct[dsln]
	if dslChk[dsln] == dsltoken { /* valid shift */
		dslrcvr.char = -1
		dsltoken = -1
		dslVAL = dslrcvr.lval
		dslstate = dsln
		if Errflag > 0 {
			Errflag--
		}
		goto dslstack
	}

dsldefault:
	/* default state action */
	dsln = dslDef[dslstate]
	if dsln == -2 {
		if dslrcvr.char < 0 {
			dslrcvr.char, dsltoken = dsllex1(dsllex, &dslrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if dslExca[xi+0] == -1 && dslExca[xi+1] == dslstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			dsln = dslExca[xi+0]
			if dsln < 0 || dsln == dsltoken {
				break
			}
		}
		dsln = dslExca[xi+1]
		if dsln < 0 {
			goto ret0
		}
	}
	if dsln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			dsllex.Error(dslErrorMessage(dslstate, dsltoken))
			Nerrs++
			if dslDebug >= 1 {
				__yyfmt__.Printf("%s", dslStatname(dslstate))
				__yyfmt__.Printf(" saw %s\n", dslTokname(dsltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for dslp >= 0 {
				dsln = dslPact[dslS[dslp].yys] + dslErrCode
				if dsln >= 0 && dsln < dslLast {
					dslstate = dslAct[dsln] /* simulate a shift of "error" */
					if dslChk[dslstate] == dslErrCode {
						goto dslstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if dslDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", dslS[dslp].yys)
				}
				dslp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if dslDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", dslTokname(dsltoken))
			}
			if dsltoken == dslEofCode {
				goto ret1
			}
			dslrcvr.char = -1
			dsltoken = -1
			goto dslnewstate /* try again in the same state */
		}
	}

	/* reduction by production dsln */
	if dslDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", dsln, dslStatname(dslstate))
	}

	dslnt := dsln
	dslpt := dslp
	_ = dslpt // guard against "declared and not used"

	dslp -= dslR2[dsln]
	// dslp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if dslp+1 >= len(dslS) {
		nyys := make([]dslSymType, len(dslS)*2)
		copy(nyys, dslS)
		dslS = nyys
	}
	dslVAL = dslS[dslp+1]

	/* consult goto table to find next state */
	dsln = dslR1[dsln]
	dslg := dslPgo[dsln]
	dslj := dslg + dslS[dslp].yys + 1

	if dslj >= dslLast {
		dslstate = dslAct[dslg]
	} else {
		dslstate = dslAct[dslj]
		if dslChk[dslstate] != -dsln {
			dslstate = dslAct[dslg]
		}
	}
	// dummy call; replaced with literal code
	switch dslnt {

	case 4:
		dslDollar = dslS[dslpt-6 : dslpt+1]
//line parser.y:34
		{
			fmt.Printf("expr: token info: %+v\n", dslDollar[1])
		}
	case 5:
		dslDollar = dslS[dslpt-5 : dslpt+1]
//line parser.y:35
		{
			fmt.Printf("expr: token info: %+v\n", dslDollar[1])
		}
	}
	goto dslstack /* stack new state and value */
}
